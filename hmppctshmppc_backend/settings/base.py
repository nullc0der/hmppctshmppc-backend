"""
Django settings for hmppctshmppc-backend project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from django.core.exceptions import ImproperlyConfigured

from celery.schedules import crontab


def get_env_var(name):
    try:
        return os.environ[name]
    except KeyError:
        raise ImproperlyConfigured(
            'Set the environment variable %s' % name
        )


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
]

PROJECT_APPS = [
    'payment_processor',
    'core_api'
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hmppctshmppc_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hmppctshmppc_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/public/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'staticfiles')]

# Media files

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Rest Framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
    ]
}

# Site type

SITE_TYPE = get_env_var('SITE_TYPE')

# Host URL

HOST_URL = get_env_var('HOST')

# Email Server Config

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = get_env_var('DJANGO_EMAIL_HOST')
EMAIL_PORT = 587
EMAIL_HOST_USER = get_env_var('DJANGO_EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_env_var('DJANGO_EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = True

# CELERY

CELERY_BROKER_URL = 'redis://' + get_env_var('REDIS_HOST') + ':6379/0'
CELERY_RESULT_BACKEND = 'redis://' + get_env_var('REDIS_HOST') + ':6379/0'
CELERY_TIMEZONE = 'UTC'
CELERY_BEAT_SCHEDULE = {
    'clean_access_token': {
        'task': 'core_api.tasks.task_clean_access_token',
        # NOTE: Need to check whether running at midnight is sufficient
        'schedule': crontab(minute=0, hour=0)
    },
    'clean_unused_payments': {
        'task': 'payment_processor.tasks.task_clean_unused_payments',
        'schedule': crontab(minute=0, hour=0)
    }
}


# Payment Processor

# Bitcoin

BITCOIN_DAEMON_HOST = get_env_var('BITCOIN_DAEMON_HOST')
BITCOIN_WALLET_RPC_USERNAME = get_env_var('BITCOIN_WALLET_RPC_USERNAME')
BITCOIN_WALLET_RPC_PASSWORD = get_env_var('BITCOIN_WALLET_RPC_PASSWORD')
BITCOIN_WALLET_NAME = get_env_var('BITCOIN_WALLET_NAME')
BITCOIN_MIN_CONFIRMATION_NEEDED = int(get_env_var(
    'BITCOIN_MIN_CONFIRMATION_NEEDED'))

# Dogecoin

DOGECOIN_DAEMON_HOST = get_env_var('DOGECOIN_DAEMON_HOST')
DOGECOIN_WALLET_RPC_USERNAME = get_env_var('DOGECOIN_WALLET_RPC_USERNAME')
DOGECOIN_WALLET_RPC_PASSWORD = get_env_var('DOGECOIN_WALLET_RPC_PASSWORD')
DOGECOIN_MIN_CONFIRMATION_NEEDED = int(get_env_var(
    'DOGECOIN_MIN_CONFIRMATION_NEEDED'))

# Monero

MONERO_DAEMON_HOST = get_env_var('MONERO_DAEMON_HOST')
MONERO_WALLET_RPC_USERNAME = get_env_var('MONERO_WALLET_RPC_USERNAME')
MONERO_WALLET_RPC_PASSWORD = get_env_var('MONERO_WALLET_RPC_PASSWORD')
MONERO_MIN_CONFIRMATION_NEEDED = int(get_env_var(
    'MONERO_MIN_CONFIRMATION_NEEDED'))
MONERO_WALLET_NAME = get_env_var('MONERO_WALLET_NAME')
MONERO_WALLET_PASSWORD = get_env_var('MONERO_WALLET_PASSWORD')


# Ethereum
ETHEREUM_DAEMON_HOST = get_env_var('ETHEREUM_DAEMON_HOST')
